// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_points.sql

package sqlcqueries

import (
	"context"

	"github.com/google/uuid"
)

const createUserPoint = `-- name: CreateUserPoint :exec
INSERT INTO user_points (user_id, points)
VALUES ($1, $2)
`

type CreateUserPointParams struct {
	UserID *uuid.UUID `json:"user_id"`
	Points int32      `json:"points"`
}

func (q *Queries) CreateUserPoint(ctx context.Context, arg CreateUserPointParams) error {
	_, err := q.db.Exec(ctx, createUserPoint, arg.UserID, arg.Points)
	return err
}

const deleteUserPoints = `-- name: DeleteUserPoints :exec
DELETE FROM user_points
WHERE id = $1
`

type DeleteUserPointsParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) DeleteUserPoints(ctx context.Context, arg DeleteUserPointsParams) error {
	_, err := q.db.Exec(ctx, deleteUserPoints, arg.ID)
	return err
}

const getUserPointByUserID = `-- name: GetUserPointByUserID :one
SELECT 
    up.id AS user_points_id, 
    u.id AS user_id,
    u.full_name AS user_full_name,
    up.points AS user_points_count 
FROM user_points up
LEFT JOIN users u ON u.id = up.user_id
WHERE up.user_id = $1
`

type GetUserPointByUserIDParams struct {
	UserID *uuid.UUID `json:"user_id"`
}

type GetUserPointByUserIDRow struct {
	UserPointsID    uuid.UUID  `json:"user_points_id"`
	UserID          *uuid.UUID `json:"user_id"`
	UserFullName    *string    `json:"user_full_name"`
	UserPointsCount int32      `json:"user_points_count"`
}

func (q *Queries) GetUserPointByUserID(ctx context.Context, arg GetUserPointByUserIDParams) (*GetUserPointByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getUserPointByUserID, arg.UserID)
	var i GetUserPointByUserIDRow
	err := row.Scan(
		&i.UserPointsID,
		&i.UserID,
		&i.UserFullName,
		&i.UserPointsCount,
	)
	return &i, err
}

const getUserPoints = `-- name: GetUserPoints :many
SELECT 
    up.id AS user_points_id, 
    u.id AS user_id,
    u.full_name AS user_full_name,
    up.points AS user_points_count 
FROM user_points up
LEFT JOIN users u ON u.id = up.user_id
`

type GetUserPointsRow struct {
	UserPointsID    uuid.UUID  `json:"user_points_id"`
	UserID          *uuid.UUID `json:"user_id"`
	UserFullName    *string    `json:"user_full_name"`
	UserPointsCount int32      `json:"user_points_count"`
}

func (q *Queries) GetUserPoints(ctx context.Context) ([]*GetUserPointsRow, error) {
	rows, err := q.db.Query(ctx, getUserPoints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUserPointsRow
	for rows.Next() {
		var i GetUserPointsRow
		if err := rows.Scan(
			&i.UserPointsID,
			&i.UserID,
			&i.UserFullName,
			&i.UserPointsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPointsByUserId = `-- name: UpdateUserPointsByUserId :exec
UPDATE user_points
SET points = points + $1
WHERE user_id = $2
`

type UpdateUserPointsByUserIdParams struct {
	Points int32      `json:"points"`
	UserID *uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateUserPointsByUserId(ctx context.Context, arg UpdateUserPointsByUserIdParams) error {
	_, err := q.db.Exec(ctx, updateUserPointsByUserId, arg.Points, arg.UserID)
	return err
}
